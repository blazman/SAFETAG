{"componentChunkName":"component---src-components-layouts-activity-layout-js","path":"/activities/vulnerability_scanning","result":{"data":{"file":{"childMarkdownRemark":{"frontmatter":{"title":"Vulnerability Scanning","approaches":["Technical"],"authors":["SAFETAG"],"remote_options":["with-support"],"skills_required":["Vulnerability Scanning","Malware analysis","Risk Assessment"],"time_required_minutes":"240","organization_size_under":100},"fields":{"frontmattermd":{"overview":{"html":"<ul>\n<li>Identify services being hosted or used by an organization</li>\n<li>Research externally-facing organization services (websites, services hosted from the office, etc.)</li>\n<li>Research information about identified services (e.g current versions of those services.)</li>\n<li>Run vulnerability scans against websites hosted by the organization, externally facing servers run by the organization, and key intranet servers.</li>\n</ul>"},"materials_needed":{"html":"<ul>\n<li>A Kali VM, bootable USB, or installed system with OWASP ZAP or OpenVAS installed, updated, and running\\</li>\n</ul>"},"considerations":{"html":"<ul>\n<li>Be very careful about which automated scans you run to ensure that no aggressive or potentially damaging tests are included.</li>\n<li>OpenVAS saves its scan records in /var/lib/openvas/mgr/tasks.db - this file will contain sensitive data, ensure it is stored securely.</li>\n<li>OpenVAS and other vulnerability scanners can be highly aggressive in their tactics.  Tools like Metasploit come with a library of active, functional exploits to \"prove\" that a system is actively vulnerable.  As such, these can be tricky to use.  Even OpenVAS on a safe-only scan can appear to a host as an active attack, blocking further access from your IP (this can cause some annoyance if you are, for example, scanning your host organization's website from their network).  Some of these scans and techniques -- again, even the \"safe\" ones -- can also be a violation of local hacking laws.  Get explicit permission, give warnings, and be careful.</li>\n</ul>"},"recommendations":{"html":"<p>The auditor will need to do research and compare against the organization's capacity and risks to give specific recommendations based on the vulnerabilities discovered in the process.  Some common recommendations include the following:</p>\n<ul>\n<li>Out of Date Content Manangement System: <strong>See also recommendations in the <a href=\"https://safetag.org/activities/web_footprint\">Website Footprinting Activity</a></strong></li>\n<li>Insecure Website Login: <strong>See also recommendations in the <a href=\"https://safetag.org/activities/insecure_website_login\">Insecure Website Login Activity</a></strong></li>\n<li>Website Vulnerabilities: <strong>See also recommendations in the <a href=\"https://safetag.org/activities/web_vulnerability_assessment\">Web Vulnerability Assessment Activity</a></strong></li>\n</ul>"},"summary":{"html":"<p>While much of SAFETAG focuses on digital security challenges within and around the office, remote attacks on the organization's website, extranets, and unintended information available from \"open sources\" all pose real threats and deserve significant attention.  SAFETAG takes great care to take a very passive approach to this work, especially when done off-site, so as not to have unintended consequences on the organization's infrastructure or undermine operational security concerns.</p>\n<p>This activity uses active research and scanning to detect known vulnerabilities in external and key internal services. Usually penetration tests exploit possible vulnerabilities to confirm their existence. <sup id=\"fnref-nist_exploit_confirm\"><a href=\"#fn-nist_exploit_confirm\" class=\"footnote-ref\">nist_exploit_confirm</a></sup> But, the use of exploits puts the organization's systems at a level of increased risk <sup id=\"fnref-nist_pen_test_danger\"><a href=\"#fn-nist_pen_test_danger\" class=\"footnote-ref\">nist_pen_test_danger</a></sup> that is unacceptable when neither the organization nor the auditor has the time or finances to address the issue. The SAFETAG methodology only uses relatively safe exploitation of vulnerabilities for targeted outcomes. For instance, cracking the wireless access point password allows us to demonstrate the importance of good passwords without singling out any individual's passwords. <sup id=\"fnref-network-access\"><a href=\"#fn-network-access\" class=\"footnote-ref\">network-access</a></sup></p>"},"walk_through":{"html":"<hr>\n<section><h6 id=\"vulnerability-scanning-using-openvas\">Vulnerability Scanning using OpenVAS</h6><p><strong>Setting up OpenVAS in Kali</strong></p><pre><code>openvas initial setup\nopenvas feed update\nopenvas check setup\nopenvas stop\nopenvas start\n</code></pre><p>Visit <a href=\"https://127.0.0.1:9392/\">https://127.0.0.1:9392/</a> in a web browser and log in.</p><p><strong>Using OpenVAS</strong></p><p>Once logged in to OpenVAS, the interface is disturbingly simple to use.  For most use, using the Wizard to scan the target server works best.  Things to verify before doing so:</p><ul>\n<li>Check the Scan defaults for the Wizard - it should be set to run the built-in \"Full and Fast\" scan</li>\n<li>For that scan, verify (under Configuration->Scan Configs) that the \"Scan Settings\" list shows \"safe_checks\" as \"yes\"</li>\n</ul><p>Once you start a scan, change the display to \"auto refresh\" to give you more feedback on the scan process. Once the scan is completed, a report can be exported in PDF form.</p><p><strong>Common problems</strong></p><ul>\n<li><strong>Errors during openvas-start</strong> OpenVAS is a rather ... delicate program. Most often, the openvas-start script will not wait long enough between launching openvassd and openvasmd, causing openvasmd to error out. Re-running openvasmd often works, though an entire stop/start cycle seems to be slightly more reliable.  Often, openvasmd will error out, but launch anyway.  Checking the web interface at <a href=\"https://127.0.0.1:9392\">https://127.0.0.1:9392</a> to make sure that you can log in is the best way to check if it's actually successfully launched.</li>\n<li>\n<p><strong>Lost admin password</strong> From a root command-line, you can reset the web interface's admin password:</p>\n<pre><code>openvasmd --create-user=admin\nopenvasmd --user=admin --new-password=admin\n</code></pre>\n</li>\n<li>\n<p><strong>openvasmd will never launch</strong> In many fresh install cases of OpenVAS7, the openVAS self-signed CA certificate is set to an invalid date, which also causes openvasmd to error out. The check-setup script will recommend rebuilding the database, but the /var/log/openvas/openvasmd.log may have errors discussing certificate errors.  If this is the case, try:</p>\n<pre><code>rm /var/lib/openvas/CA/*\nrm /var/lib/openvas/private/CA/*\nopenvas-mkcert\nopenvas-mkcert-client -n -i\nopenvas-check-setup\nopenvas-start\nopenvasmd --rebuild\nopenvas-stop\nopenvas-start\n</code></pre>\n</li>\n</ul><hr></section>"}}}}}},"pageContext":{"slug":"/activities/vulnerability_scanning"}},"staticQueryHashes":["3649515864","63159454"]}