{"version":3,"sources":["webpack:///./src/pages/posts.js","webpack:///./src/styles/card.js","webpack:///./src/styles/inpage.js"],"names":["IndexPage","data","title","id","size","variation","withDeco","allMarkdownRemark","edges","map","index","node","key","to","fields","slug","frontmatter","date","query","getCardBorder","border","themeVal","Card","styled","article","glsp","_lighten","css","withHover","CardHeader","div","CardHeading","Heading","CardList","ul","listReset","media","smallUp","largeUp","Inpage","InpageInnerColumns","Constrainer","mediumUp","columnLayout","InpageHeader","header","isHidden","visuallyHidden","InpageHeaderInner","InpageHeadline","InpageTitle","props","InpageBody","p","headingAlt","section","InpageBodyInner"],"mappings":"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","file":"component---src-pages-posts-js-b99421373ebd58e38615.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\n\nimport GlobalLayout from \"../components/layouts/global-layout\"\nimport SEO from \"../components/seo\"\n\nimport {\n  Inpage,\n  InpageBody,\n  InpageBodyInner,\n} from \"../styles/inpage\"\nimport Heading from \"../styles/type/heading\"\n\nfunction IndexPage({ data }) {\n\n  return (\n    <GlobalLayout>\n      <SEO title=\"Safetag\" />\n      <Inpage>\n\n        <InpageBody>\n          <InpageBodyInner>\n            <Heading id=\"recent-updates\" size=\"jumbo\" variation=\"primary\" withDeco>\n              All posts\n            </Heading>\n            <ul>\n              {data.allMarkdownRemark.edges.map(\n                ({ node }, index) => (\n                    <li key={index}>\n                      <Link to={node.fields.slug}>{node.frontmatter.title}</Link> &mdash; {node.frontmatter.date}\n                    </li>\n                  )\n              )}\n            </ul>\n          </InpageBodyInner>\n        </InpageBody>\n\n      </Inpage>\n    </GlobalLayout>\n  )\n}\n\nIndexPage.propTypes = {\n  data: PropTypes.array,\n}\n\nexport default IndexPage\n\n/*\n      filter: {\n        relativeDirectory: { eq: \"methods\" }\n        internal: { mediaType: { eq: \"text/markdown\" } }\n      }\n*/\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date],  order: DESC },\n      filter: {fileAbsolutePath: {regex: \"/posts/\"}}\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM Do, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`\n","import styled, { css } from \"styled-components\"\nimport { themeVal } from \"./utils/general\"\nimport media from \"./utils/media-queries\"\nimport { glsp, _lighten } from \"./utils/theme-values\"\nimport { listReset } from \"./helpers/index\"\nimport Heading from \"./type/heading\"\n\nconst getCardBackground = ({ variation }) => {\n  if (variation === \"base\") return _lighten(0.75, themeVal(\"color.base\"))\n  if (variation === \"primary\") return _lighten(0.5, themeVal(\"color.primary\"))\n  if (variation === \"secondary\")\n    return _lighten(0.525, themeVal(\"color.secondary\"))\n  if (variation === \"white\") return _lighten(themeVal(0.5, \"color.surface\"))\n  if (variation === \"outline\") return \"transparent\"\n  return \"white\"\n}\n\nconst getCardBorder = ({ border }) => {\n  if (border === \"base\") return themeVal(\"color.base\")\n  if (border === \"primary\") return themeVal(\"color.primary\")\n  if (border === \"secondary\") return themeVal(\"color.secondary\")\n  if (border === \"white\") return themeVal(\"color.surface\")\n  return \"inherit\"\n}\n\nconst Card = styled.article`\n  padding: ${glsp(2)} ${glsp(1.5)};\n  display: flex;\n  flex-flow: column;\n  color: ${themeVal(\"color.base\")};\n  background: ${getCardBackground};\n  position: relative;\n  ${({ border }) =>\n    border &&\n    css`\n      border: 2px solid ${getCardBorder};\n    `}\n  & > :last-child:not(:first-child) {\n    padding-top: ${glsp(2)};\n  }\n  &:visited {\n    color: ${themeVal(\"color.base\")};\n  }\n  a,\n  a:visited {\n    color: ${themeVal(\"color.link\")};\n  }\n\n  h1, h2, h3 {\n    margin: 0;\n  }\n  /* offset box outline on hover style requires 'withHover' prop */\n  ${({ withHover }) =>\n    withHover &&\n    css`\n      &:after {\n        position: absolute;\n        content: \"\";\n        opacity: 0;\n        width: 100%;\n        height: 100%;\n        left: 0;\n        top: 0;\n        z-index: -1;\n        border: 2px solid ${getCardBorder};\n        background: none;\n        transition: all 0.16s cubic-bezier(0.55, 0.085, 0.68, 0.53);\n      }\n      &:hover {\n        &:after {\n          opacity: 1;\n          transform: translate(10px, 10px);\n          transition-delay: 0.08s;\n        }\n      }\n    `}\n`\n\nexport default Card\n\nexport const CardHeader = styled.div`\n  display: flex;\n  align-items: flex-start;\n  img {\n    max-height: 2rem;\n    margin-right: 1rem;\n  }\n  h1 {\n    flex: 1;\n  }\n`\n\nexport const CardHeading = styled(Heading)`\n  margin-bottom: ${glsp()};\n  position: relative;\n  letter-spacing: 0.5px;\n`\n\nexport const CardFooter = styled.div`\n  margin-top: auto;\n`\n\nexport const CardList = styled.ul`\n  ${listReset()};\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  grid-gap: ${glsp(2)};\n  ${Card} {\n    height: 100%;\n  }\n  li {\n    grid-column: auto / span 6;\n\n    /* Small up */\n    ${media.smallUp`\n      grid-column: auto / span 3;\n    `}\n\n    /* Large up */\n    ${media.largeUp`\n      grid-column: auto / span 2;\n    `}\n  }\n`\n","import React from \"react\"\nimport styled, { css } from \"styled-components\"\n\nimport { visuallyHidden } from \"./helpers\"\nimport { themeVal } from \"./utils/general\"\nimport { glsp } from \"./utils/theme-values\"\nimport Heading, { headingAlt } from \"./type/heading\"\nimport Constrainer from \"./constrainer\"\nimport Card from \"./card\"\nimport media from \"./utils/media-queries\"\n\nconst getColumnLayout = ({ columnLayout }) => {\n  if (columnLayout === \"1:1\") return \"1fr 1fr\"\n  if (columnLayout === \"2:1\") return \"2fr 1fr\"\n  if (columnLayout === \"3:1\") return \"3fr 1fr\"\n  return \"inherit\"\n}\n\nexport const Inpage = styled.article`\n  display: grid;\n  height: 100%;\n  grid-template-rows: auto 1fr;\n`\n\nexport const InpageInnerColumns = styled(Constrainer)`\n  display: grid;\n  grid-template-columns: 1fr;\n  padding-top: ${glsp(1)};\n  padding-bottom: ${glsp(2)};\n  ${media.mediumUp`\n    grid-template-columns: ${getColumnLayout};\n    gap: ${glsp(4)};\n    padding-top: ${glsp(2)};\n  `}\n  & > section > ${Card} {\n    margin-top: 1rem;\n    display: block;\n  }\n  & > * {\n    margin-bottom: 2rem;\n    ${media.mediumUp`\n      margin-bottom: 0;\n    `}\n  }\n`\n\nexport const InpageHeader = styled.header`\n  /* Visually hidden */\n  ${({ isHidden }) =>\n    isHidden &&\n    css`\n      ${visuallyHidden()}\n    `}\n  padding-bottom: ${glsp(2)};\n`\n\nexport const InpageHeaderInner = styled(Constrainer)`\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-between;\n  padding: ${glsp(4)} ${glsp()};\n`\n\nexport const InpageHeadline = styled.div`\n  display: flex;\n  flex-flow: column;\n  min-width: 0;\n  > *:first-child {\n    margin-bottom: ${glsp()};\n  }\n  > *:last-child {\n    margin-bottom: ${glsp()};\n  }\n`\n\nexport const InpageToolbar = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  padding-left: ${glsp(2)};\n  margin-left: auto;\n`\n\nexport const InpageTitleWrapper = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  min-width: 0;\n  margin-bottom: ${glsp(1.5)};\n`\n\nexport const InpageTitle = styled(({ ...props }) => <Heading {...props} />)`\n  margin-bottom: ${glsp(0.5)};\n  line-height: 3rem;\n`\n\nexport const InpageTagline = styled.p`\n  ${headingAlt()}\n  font-size: 0.875rem;\n  line-height: 1rem;\n`\n\nconst getBodyStyles = ({ variation }) => {\n  if (variation === \"dark\")\n    return css`\n      background-color: ${themeVal(\"color.base\")};\n      & * {\n        color: ${themeVal(\"color.surface\")};\n        border-color: ${themeVal(\"color.surface\")};\n        &:after {\n          background-color: ${themeVal(\"color.surface\")};\n        }\n        a {\n          color: ${themeVal(\"color.surface\")};\n          text-decoration: underline;\n        }\n      }\n    `\n  else if (variation === \"blue\")\n    return css`\n      background-color: ${themeVal(\"color.primary\")};\n      & * {\n        color: ${themeVal(\"color.surface\")};\n        border-color: ${themeVal(\"color.surface\")};\n        &:after {\n          background-color: ${themeVal(\"color.surface\")};\n        }\n        a {\n          color: ${themeVal(\"color.surface\")};\n          text-decoration: underline;\n        }\n        a:visited {\n          color: ${themeVal(\"color.surface\")};\n        }\n      }\n    `\n  return css`\n    background-color: transparent;\n  `\n}\n\nexport const InpageBody = styled.section`\n  ${getBodyStyles};\n  & ~ & {\n    padding-top: ${glsp(2)};\n    padding-bottom: ${glsp(2)};\n  }\n  p > img {\n    display: block;\n    margin: 1rem auto;\n    max-width: 100%;\n  }\n`\n\nexport const InpageBodyInner = styled(Constrainer)`\n  padding: ${glsp(2)} ${glsp()};\n\n  & ~ & {\n    padding: ${glsp()};\n  }\n`\n"],"sourceRoot":""}